import re
import os


opcode_function_pairs = [
    ['0001 11rd dddd rrrr', 'adc',    'adc_disassemble'   ],
    ['0000 11rd dddd rrrr', 'add',    'add_disassemble'   ],
    ['0111 KKKK dddd KKKK', 'andi',   'andi_disassemble'  ],
    ['1111 01kk kkkk k001', 'brne',   'brne_disassemble'  ],
    ['1001 010k kkkk 111k', 'call',   'call_disassemble'  ],
    ['1001 1000 AAAA Abbb', 'cbi',    'cbi_disassemble'   ],
    ['1001 0100 1111 1000', 'cli',    'cli_disassemble'   ],
    ['0001 01rd dddd rrrr', 'cp',     'cp_disassemble'    ],
    ['1001 010d dddd 1010', 'dec',    'dec_disassemble'   ],
    ['0010 01rd dddd rrrr', 'eorclr', 'eorclr_disassemble'],
    ['1011 0AAd dddd AAAA', 'in',     'in_disassemble'    ],
    ['1001 010k kkkk 110k', 'jmp',    'jmp_disassemble'   ],
    ['1110 KKKK dddd KKKK', 'ldi',    'ldi_disassemble'   ],
    ['1001 000d dddd 0000', 'lds32',  'lds32_disassemble' ],
    ['1010 0kkk dddd kkkk', 'lds16',  'lds16_disassemble' ],
    ['0000 0000 0000 0000', 'nop',    'nop_disassemble'   ],
    ['0110 KKKK dddd KKKK', 'ori',    'ori_disassemble'   ],
    ['1011 1AAr rrrr AAAA', 'out',    'out_disassemble'   ],
    ['1001 000d dddd 1111', 'pop',    'pop_disassemble'   ],
    ['1001 001d dddd 1111', 'push',   'push_disassemble'  ],
    ['1101 kkkk kkkk kkkk', 'rcall',  'rcall_disassemble' ],
    ['1001 0101 0000 1000', 'ret',    'ret_disassemble'   ],
    ['1001 0101 0001 1000', 'reti',   'reti_disassemble'  ],
    ['1100 kkkk kkkk kkkk', 'rjmp',   'rjmp_disassemble'  ],
    ['0100 KKKK dddd KKKK', 'sbci',   'sbci_disassemble'  ],
    ['1001 1010 AAAA Abbb', 'sbi',    'sbi_disassemble'   ],
    ['1001 1001 AAAA Abbb', 'sbic',   'sbic_disassemble'  ],
    ['1001 1011 AAAA Abbb', 'sbis',   'sbis_disassemble'  ],
    ['1001 0111 KKdd KKKK', 'sbiw',   'sbiw_disassemble'  ],
    ['1001 001d dddd 0000', 'sts',    'sts_disassemble'   ],
    ['0101 KKKK dddd KKKK', 'subi',   'subi_disassemble'  ],
]


jumptable_implementations = ["unknown"] * 65536

jumptable_disassemble = ["unknown_disassemble"] * 65536


for pair in opcode_function_pairs:
    pair[0] = pair[0].replace(" ", "")
    pair[0] = re.sub('[a-zA-Z]', '[0-1]', pair[0])

for i in range(65536):
    for pair in opcode_function_pairs:
        if re.match(pair[0], format(i, '016b')):
            jumptable_implementations[i] = pair[1]
            jumptable_disassemble[i] = pair[2]







header_jumptable_implementations = r"""// Autogenerated file, do not make any changes here. Modification must be made in
// instruction_table_generator.py

#pragma once

#include <stdint.h>
#include "implementation.h"

void (*jti_implementationTable[])(void) = {"""
footer_jumptable_implementations = r"""}"""


with open(os.path.dirname(__file__) + '/jump_table_implementation.h', 'w') as file:
    file.write(header_jumptable_implementations + '\n')
    for function_name in jumptable_implementations:
        file.write("    " + function_name + ",\n")
    file.write(footer_jumptable_implementations + '\n')






header_jumptable_disassemble = r"""// Autogenerated file, do not make any changes here. Modification must be made in
// instruction_table_generator.py

#pragma once

#include <stdint.h>
#include "disassemble.h"

InstructionInfo (*jtd_disassembleTable[])(uint16_t, uint16_t) = {"""
footer_jumptable_disassemble = r"""}"""


with open(os.path.dirname(__file__) + '/jump_table_disassemble.h', 'w') as file:
    file.write(header_jumptable_disassemble + '\n')
    for function_name in jumptable_disassemble:
        file.write("    " + function_name + ",\n")
    file.write(footer_jumptable_disassemble + '\n')

